const readline = require('readline');
const GameExplorer = require('./game-explorer');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function printWelcome() {
  console.log('\nüéÆ TESTOVAC√ç N√ÅSTROJ PRO TEXTOV√â HRY 2.0');
  console.log('=====================================');
  console.log('Pokroƒçil√Ω pr≈Øzkum s metrikami a anal√Ωzou');
  console.log('');
}

function printHelp() {
  console.log('P≈ô√≠klady URL:');
  console.log('‚Ä¢ https://emperorkundis.github.io/physics-adventure-game/');
  console.log('‚Ä¢ http://localhost:3000/your-game');
  console.log('‚Ä¢ file:///path/to/your/game.html');
  console.log('');
}

async function main() {
  printWelcome();
  
  rl.question('üìç Zadejte URL textov√© hry (nebo "help" pro p≈ô√≠klady): ', async (input) => {
    if (input.toLowerCase() === 'help') {
      printHelp();
      rl.close();
      return;
    }
    
    if (!input.trim()) {
      console.log('‚ùå Chyba: URL nem≈Ø≈æe b√Ωt pr√°zdn√©');
      rl.close();
      return;
    }
    
    // Validate URL format
    try {
      new URL(input);
    } catch (error) {
      console.log('‚ùå Chyba: Neplatn√Ω form√°t URL');
      rl.close();
      return;
    }
    
    console.log(`\nüöÄ Zaƒç√≠n√°m pr≈Øzkum hry: ${input}`);
    console.log('‚è±Ô∏è  Toto m≈Ø≈æe chv√≠li trvat...\n');
    
    const explorer = new GameExplorer();
    
    try {
      const startTime = Date.now();
      const results = await explorer.exploreGame(input);
      const endTime = Date.now();
      
      console.log('\n‚úÖ PR≈ÆZKUM DOKONƒåEN!');
      console.log('==================');
      console.log(`‚è±Ô∏è  Celkov√Ω ƒças: ${((endTime - startTime) / 1000).toFixed(1)}s`);
      console.log(`üìä Analyzov√°no stav≈Ø: ${results.metrics.summary.totalStates}`);
      console.log(`üõ§Ô∏è  Nalezeno cest: ${results.metrics.summary.totalPaths}`);
      console.log(`üìè Maxim√°ln√≠ hloubka: ${results.metrics.summary.maxDepth}`);
      console.log(`‚öñÔ∏è  Vyv√°≈æenost hry: ${results.metrics.quality.gameBalance}`);
      
      console.log('\nüìÅ VYGENEROVAN√â SOUBORY:');
      console.log('‚Ä¢ game_exploration_results.json - Kompletn√≠ hern√≠ strom');
      console.log('‚Ä¢ game_exploration_report.txt - Lidsky ƒçiteln√© shrnut√≠');
      console.log('‚Ä¢ game_metrics.json - Detailn√≠ metriky');
      console.log('‚Ä¢ game_metrics_summary.txt - P≈ôehled metrik v ƒçe≈°tinƒõ');
      
      if (results.metrics.summary.totalStates > 50) {
        console.log('\nüí° TIP: Pro velk√© hry zva≈æte pou≈æit√≠ vizualizaƒçn√≠ho n√°stroje');
      }
      
      if (results.metrics.structure.deadEnds > results.metrics.summary.totalStates * 0.3) {
        console.log('\n‚ö†Ô∏è  VAROV√ÅN√ç: Hra m√° mnoho slep√Ωch uliƒçek (>30%)');
      }
      
    } catch (error) {
      console.error('\n‚ùå CHYBA P≈òI PR≈ÆZKUMU:');
      console.error(error.message);
      
      if (error.message.includes('net::ERR_')) {
        console.log('\nüí° Mo≈æn√© ≈ôe≈°en√≠:');
        console.log('‚Ä¢ Zkontrolujte internetov√© p≈ôipojen√≠');
        console.log('‚Ä¢ Ovƒõ≈ôte, ≈æe URL je dostupn√°');
        console.log('‚Ä¢ Pro lok√°ln√≠ soubory pou≈æijte file:// protokol');
      }
    }
    
    rl.close();
  });
}

if (require.main === module) {
  main().catch(console.error);
}