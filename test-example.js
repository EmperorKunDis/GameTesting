const GameExplorer = require('./game-explorer');

// Test example for automated testing
async function runTestExample() {
  console.log('üß™ TESTOVAC√ç P≈ò√çKLAD');
  console.log('====================');
  
  const explorer = new GameExplorer();
  
  // Test with your physics adventure game
  const testUrl = 'https://emperorkundis.github.io/physics-adventure-game/';
  
  console.log(`üéØ Testov√°n√≠ hry: ${testUrl}`);
  console.log('üìä Spou≈°t√≠m automatick√Ω test...\n');
  
  try {
    const startTime = Date.now();
    const results = await explorer.exploreGame(testUrl);
    const endTime = Date.now();
    
    console.log('\n‚úÖ TEST DOKONƒåEN!');
    console.log('================');
    
    // Display key metrics
    console.log('\nüìà KL√çƒåOV√â METRIKY:');
    console.log(`‚Ä¢ Stav≈Ø: ${results.metrics.summary.totalStates}`);
    console.log(`‚Ä¢ Cest: ${results.metrics.summary.totalPaths}`);
    console.log(`‚Ä¢ Max hloubka: ${results.metrics.summary.maxDepth}`);
    console.log(`‚Ä¢ Vƒõtven√≠: ${results.metrics.structure.branchingFactor.avg}`);
    console.log(`‚Ä¢ Slep√© uliƒçky: ${results.metrics.structure.deadEnds}`);
    console.log(`‚Ä¢ Celkov√© sk√≥re: ${results.metrics.quality.overallScore}/100`);
    
    // Test assertions
    console.log('\nüîç VALIDACE V√ùSLEDK≈Æ:');
    
    // Basic validation
    if (results.metrics.summary.totalStates > 0) {
      console.log('‚úÖ Stavy byly nalezeny');
    } else {
      console.log('‚ùå ≈Ω√°dn√© stavy nebyly nalezeny');
    }
    
    if (results.metrics.summary.maxDepth > 0) {
      console.log('‚úÖ Hra m√° nƒõjakou hloubku');
    } else {
      console.log('‚ùå Hra nem√° ≈æ√°dnou hloubku');
    }
    
    if (results.metrics.structure.branchingFactor.avg > 0) {
      console.log('‚úÖ Nalezeny volby pro hr√°ƒçe');
    } else {
      console.log('‚ùå Nenalezeny ≈æ√°dn√© volby');
    }
    
    // Performance validation
    const totalTimeSeconds = (endTime - startTime) / 1000;
    if (totalTimeSeconds < 300) { // 5 minutes
      console.log('‚úÖ Test dokonƒçen v rozumn√©m ƒçase');
    } else {
      console.log('‚ö†Ô∏è  Test trval dlouho (>5 min)');
    }
    
    // Quality checks
    if (results.metrics.quality.overallScore >= 70) {
      console.log('‚úÖ Hra m√° dobr√© celkov√© sk√≥re');
    } else {
      console.log('‚ö†Ô∏è  Hra m√° n√≠zk√© celkov√© sk√≥re');
    }
    
    console.log('\nüìÅ VYGENEROVAN√â SOUBORY:');
    console.log('‚Ä¢ game_exploration_results.json');
    console.log('‚Ä¢ game_exploration_report.txt');
    console.log('‚Ä¢ game_metrics.json');
    console.log('‚Ä¢ game_metrics_summary.txt');
    
    return results;
    
  } catch (error) {
    console.error('\n‚ùå TEST SELHAL:');
    console.error(error.message);
    
    console.log('\nüîß MO≈ΩN√â ≈òE≈†EN√ç:');
    console.log('‚Ä¢ Zkontrolujte internetov√© p≈ôipojen√≠');
    console.log('‚Ä¢ Ovƒõ≈ôte, ≈æe URL je dostupn√°');
    console.log('‚Ä¢ Zkuste spustit test pozdƒõji');
    
    return null;
  }
}

// Advanced test with multiple scenarios
async function runAdvancedTest() {
  console.log('\nüöÄ POKROƒåIL√ù TEST');
  console.log('=================');
  
  const testScenarios = [
    {
      name: 'Hlavn√≠ hra',
      url: 'https://emperorkundis.github.io/physics-adventure-game/',
      expectedMinStates: 5,
      expectedMinDepth: 2
    }
    // Add more test scenarios here
  ];
  
  const results = [];
  
  for (const scenario of testScenarios) {
    console.log(`\nüéÆ Testov√°n√≠: ${scenario.name}`);
    console.log(`üåê URL: ${scenario.url}`);
    
    try {
      const explorer = new GameExplorer();
      const result = await explorer.exploreGame(scenario.url);
      
      // Validate expectations
      const passed = 
        result.metrics.summary.totalStates >= scenario.expectedMinStates &&
        result.metrics.summary.maxDepth >= scenario.expectedMinDepth;
      
      results.push({
        scenario: scenario.name,
        passed: passed,
        states: result.metrics.summary.totalStates,
        depth: result.metrics.summary.maxDepth,
        score: result.metrics.quality.overallScore
      });
      
      console.log(passed ? '‚úÖ PRO≈†EL' : '‚ùå NEPRO≈†EL');
      
    } catch (error) {
      console.log(`‚ùå CHYBA: ${error.message}`);
      results.push({
        scenario: scenario.name,
        passed: false,
        error: error.message
      });
    }
  }
  
  // Summary
  console.log('\nüìä SOUHRN TEST≈Æ:');
  console.log('================');
  
  results.forEach(result => {
    console.log(`${result.passed ? '‚úÖ' : '‚ùå'} ${result.scenario}`);
    if (result.states) {
      console.log(`   Stav≈Ø: ${result.states}, Hloubka: ${result.depth}, Sk√≥re: ${result.score}`);
    }
    if (result.error) {
      console.log(`   Chyba: ${result.error}`);
    }
  });
  
  const passedCount = results.filter(r => r.passed).length;
  console.log(`\nüìà √öspƒõ≈°nost: ${passedCount}/${results.length} (${((passedCount/results.length)*100).toFixed(1)}%)`);
  
  return results;
}

// Performance benchmark
async function runPerformanceBenchmark() {
  console.log('\n‚ö° V√ùKONNOSTN√ç BENCHMARK');
  console.log('========================');
  
  const url = 'https://emperorkundis.github.io/physics-adventure-game/';
  const runs = 3;
  const times = [];
  
  for (let i = 0; i < runs; i++) {
    console.log(`\nüèÉ Bƒõh ${i + 1}/${runs}`);
    
    const startTime = Date.now();
    const explorer = new GameExplorer();
    
    try {
      await explorer.exploreGame(url);
      const endTime = Date.now();
      const duration = endTime - startTime;
      times.push(duration);
      
      console.log(`‚è±Ô∏è  ƒåas: ${(duration / 1000).toFixed(1)}s`);
      
    } catch (error) {
      console.log(`‚ùå Chyba v bƒõhu ${i + 1}: ${error.message}`);
    }
  }
  
  if (times.length > 0) {
    const avgTime = times.reduce((a, b) => a + b, 0) / times.length;
    const minTime = Math.min(...times);
    const maxTime = Math.max(...times);
    
    console.log('\nüìä V√ùSLEDKY BENCHMARKU:');
    console.log(`‚Ä¢ Pr≈Ømƒõrn√Ω ƒças: ${(avgTime / 1000).toFixed(1)}s`);
    console.log(`‚Ä¢ Nejrychlej≈°√≠: ${(minTime / 1000).toFixed(1)}s`);
    console.log(`‚Ä¢ Nejpomalej≈°√≠: ${(maxTime / 1000).toFixed(1)}s`);
    console.log(`‚Ä¢ Variabilita: ${(((maxTime - minTime) / avgTime) * 100).toFixed(1)}%`);
  }
  
  return times;
}

// Main test runner
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--basic')) {
    await runTestExample();
  } else if (args.includes('--advanced')) {
    await runAdvancedTest();
  } else if (args.includes('--benchmark')) {
    await runPerformanceBenchmark();
  } else {
    console.log('üß™ TESTOVAC√ç SADA PRO GAME TESTING TOOL');
    console.log('=======================================');
    console.log('');
    console.log('Dostupn√© testy:');
    console.log('‚Ä¢ node test-example.js --basic      - Z√°kladn√≠ test');
    console.log('‚Ä¢ node test-example.js --advanced   - Pokroƒçil√Ω test');
    console.log('‚Ä¢ node test-example.js --benchmark  - V√Ωkonnostn√≠ test');
    console.log('');
    console.log('Spou≈°t√≠m z√°kladn√≠ test...');
    
    await runTestExample();
  }
}

if (require.main === module) {
  main().catch(console.error);
}